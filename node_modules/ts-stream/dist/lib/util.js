/**
 * Promise-based object stream with seamless support for back-pressure and error
 * handling, written in Typescript.
 *
 * Copyright (C) 2015 Martin Poelstra
 * License: MIT
 */
"use strict";
/**
 * Do nothing.
 */
function noop() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
    }
    /* no-op */
}
exports.noop = noop;
/**
 * Swallow any error that may result from this promise.
 * Prevents PossiblyUnhandledExceptionErrors.
 */
function swallowErrors(promise) {
    promise.done(noop, noop);
}
exports.swallowErrors = swallowErrors;
//# sourceMappingURL=util.js.map