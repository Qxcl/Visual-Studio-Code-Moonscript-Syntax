/// <reference types="node" />
import { Thenable } from "ts-promise";
import { Readable, Writable } from "./Stream";
export interface Transform<In, Out> {
    (readable: Readable<In>, writable: Writable<Out>): void;
}
export declare function compose<In, Middle, Out>(t1: Transform<In, Middle>, t2: Transform<Middle, Out>): Transform<In, Out>;
export declare function map<T, R>(readable: Readable<T>, writable: Writable<R>, mapper: (value: T) => R | Thenable<R>, ender?: (error?: Error) => void | Thenable<void>, aborter?: (error: Error) => void): void;
export declare function filter<T>(readable: Readable<T>, writable: Writable<T>, filterer: (value: T) => boolean | Thenable<boolean>, ender?: (error?: Error) => void | Thenable<void>, aborter?: (error: Error) => void): void;
export default Transform;
